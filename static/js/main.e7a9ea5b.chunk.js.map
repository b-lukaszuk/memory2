{"version":3,"sources":["components/CardCell.tsx","components/Players.tsx","customClasses/card/card.ts","customClasses/card/cardFactory.ts","customClasses/player/player.ts","customClasses/player/playerFactory.ts","components/GamePage.tsx","components/LandingPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CardCell","props","clickHandlerIn","clickHandler","cardIn","card","className","isCovered","isMatched","join","onClick","getId","getSymbol","Players","playerData","players","map","p","isOnMove","getName","getPoints","Card","symbol","_symbol","_covered","_matched","_id","this","counter","other","CardFactory","_symbols","_cards","i","length","push","sort","Math","random","shuffleCards","singleton","instance","getCardFactoryInstance","Boolean","Player","_name","_onMove","_points","_counter","howMany","PlayerFactory","_players","getPlayerFactoryInstance","noOfPlayers","init","GamePage","useParams","playerFactory","singlPlayerFactory","useState","getAllPlayers","setPlayers","togglePlayerOnMove","playerId","toggleOnMove","cardFactory","singlCardFactory","getAllCards","cards","setCards","canClickOnCard","setCanClickOnCard","toggleCardCover","cardId","c","toggleCovered","toggleCardMatched","id","toggleMatched","handleCardClick","uncovCards","filter","setTimeout","forEach","addPoints","idOnMove","moveToNextPlayer","o","LandingPage","setNoOfPlayers","history","useHistory","onSubmit","event","preventDefault","replace","value","onChange","parseInt","target","type","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e7a9ea5b.chunk.js","sourcesContent":["import React from \"react\";\n\nimport Card from \"../customClasses/card/card\";\n\nimport \"./CardCell.css\";\n\ninterface Props {\n    card: Card;\n    clickHandler: (id: number) => void;\n}\n\nconst CardCell: React.FC<Props> = (props) => {\n    const clickHandlerIn = props.clickHandler;\n    const cardIn: Card = props.card;\n\n    return (\n        <div\n            className={[\n                \"card\",\n                cardIn.isCovered() ? \"covered\" : \"uncovered\",\n                cardIn.isMatched() ? \"matched\" : \"\",\n            ].join(\" \")}\n            onClick={() => {\n                if (!cardIn.isMatched()) {\n                    clickHandlerIn(cardIn.getId());\n                }\n            }}\n        >\n            {cardIn.isCovered() ? \"\" : cardIn.getSymbol()}\n        </div>\n    );\n};\n\nexport default CardCell;\n","import React from \"react\";\n\nimport Player from \"../customClasses/player/player\";\n\nimport \"./Players.css\";\n\ninterface Props {\n    players: Player[];\n}\n\nconst Players: React.FC<Props> = (props) => {\n\n    const playersIn = props.players;\n    const playerData = playersIn.map((p) => {\n        return (\n            <tr key={p.getId()} className={p.isOnMove() ? 'onMove' : ''}>\n                <td>\n                    {p.getName()} : {p.getPoints()}\n                </td>\n            </tr>\n        )\n    })\n\n    return (\n        <div className=\"players\">\n            <table>\n                <tbody>\n                    {playerData}\n                </tbody>\n            </table>\n        </div >\n    );\n};\n\nexport default Players;\n","class Card {\n    private _symbol: string;\n    private _covered: boolean;\n    private _matched: boolean;\n    private _id: number;\n    static counter: number = 0;\n\n    public constructor(symbol: string) {\n        this._symbol = symbol;\n        this._covered = true; // covered/uncovered right now\n        this._matched = false; // is matched with other card of a pair\n        this._id = Card.counter;\n        Card.counter += 1;\n    }\n\n    public getId(): number {\n        return this._id;\n    }\n\n    public getSymbol(): string {\n        return this._symbol;\n    }\n\n    public isSymbolEqual(other: Card) {\n        return this._symbol === other._symbol;\n    }\n\n    public isEqual(other: Card) {\n        return this._id === other._id;\n    }\n\n    public toString(): string {\n        return this._covered ? '' : this._symbol;\n    }\n\n    public toggleCovered(): void {\n        this._covered = !this._covered;\n    }\n\n    public toggleMatched(): void {\n        this._matched = !this._matched;\n    }\n\n    public isMatched(): boolean {\n        return this._matched;\n    }\n\n    public isCovered() {\n        return this._covered;\n    }\n\n    // for setting class of the displayed card in html\n    public getStatus(): string {\n        if (this._matched) {\n            return 'matched';\n        } else if (this._covered) {\n            return 'covered';\n        } else {\n            return 'uncovered';\n        }\n    }\n}\n\nexport default Card;\n","import Card from './card';\n\nclass CardFactory {\n    private _symbols: string[] = [\n        '!',\n        '@',\n        '#',\n        '$',\n        '%',\n        '^',\n        '&',\n        '*',\n        '=',\n        '+',\n        '-',\n        '~',\n    ];\n\n    private _cards: Card[] = [];\n\n    public constructor() {\n        for (let i = 0; i < this._symbols.length; i++) {\n            // creates two cards of a kind\n            this._cards.push(new Card(this._symbols[i]));\n            this._cards.push(new Card(this._symbols[i]));\n        }\n    }\n\n    private shuffleCards(): void {\n        this._cards.sort(() => (Math.random() > 0.5) ? 1 : -1);\n    }\n\n    public getAllCards(): Card[] {\n        this.shuffleCards();\n        return this._cards;\n    }\n}\n\nconst singleton = (function() {\n    let instance: CardFactory; // uninitialized so undefined\n\n    function init() {\n        return new CardFactory();\n    }\n\n    function getInstance() {\n        if (!Boolean(instance)) {\n            instance = init();\n        }\n        return instance;\n    }\n\n    return {\n        getCardFactoryInstance: getInstance,\n    };\n})();\n\nexport default singleton;\n","class Player {\n\n    private _id: number;\n    private _name: string;\n    private _onMove: boolean;\n    private _points: number;\n    static _counter: number = 0;\n\n    public constructor() {\n        this._id = Player._counter;\n        Player._counter += 1;\n        this._name = \"Player \" + (this._id + 1);\n        this._onMove = this._id === 0 ? true : false;\n        this._points = 0;\n    }\n\n    public getId(): number {\n        return this._id;\n    }\n\n    public getName(): string {\n        return this._name;\n    }\n\n    public getPoints(): string {\n        return this._points + \" pts\";\n    }\n\n    public addPoints(howMany: number = 100): void {\n        this._points += howMany;\n    }\n\n    public isOnMove(): boolean {\n        return this._onMove;\n    }\n\n    public toggleOnMove(): void {\n        this._onMove = !this._onMove;\n    }\n}\n\nexport default Player;\n","import Player from \"./player\";\n\nclass PlayerFactory {\n\n    private _players: Player[] = [];\n\n    public constructor(howMany: number) {\n        for (let i = 0; i < howMany; i++) {\n            this._players.push(new Player());\n        }\n    }\n\n    public getAllPlayers(): Player[] {\n        return this._players;\n    }\n}\n\nconst singleton = (function() {\n    let instance: PlayerFactory; // uninitialized so undefined\n\n    function init(noOfPlayers: number) {\n        return new PlayerFactory(noOfPlayers);\n    }\n\n    function getInstance(noOfPlayers: number) {\n        if (!Boolean(instance)) {\n            instance = init(noOfPlayers);\n        }\n        return instance;\n    }\n\n    return {\n        getPlayerFactoryInstance: getInstance,\n    };\n})();\n\nexport default singleton;\n","import React, { useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport Card from \"../customClasses/card/card\";\nimport CardCell from \"./CardCell\";\nimport Player from \"../customClasses/player/player\";\nimport Players from \"./Players\";\nimport singlCardFactory from \"../customClasses/card/cardFactory\";\nimport singlPlayerFactory from \"../customClasses/player/playerFactory\";\n\nimport \"./GamePage.css\";\n\nconst GamePage: React.FC = () => {\n    ///////////////////////////////////////////////////////////////////////////\n    //                      players and their functions                      //\n    ///////////////////////////////////////////////////////////////////////////\n    // consider using useReducer for players\n    let noOfPlayers: any = useParams();\n    const playerFactory = singlPlayerFactory.getPlayerFactoryInstance(\n        noOfPlayers.noOfPlayers\n    );\n    const [players, setPlayers] = useState(playerFactory.getAllPlayers());\n\n    const addPtsToPlayerOnMove = () => {\n        setPlayers(\n            players.map((p) => {\n                if (p.isOnMove()) {\n                    p.addPoints();\n                }\n                return p;\n            })\n        );\n    };\n\n    const togglePlayerOnMove = (playerId: number) => {\n        setPlayers(\n            players.map((p) => {\n                if (p.getId() === playerId) {\n                    p.toggleOnMove();\n                }\n                return p;\n            })\n        );\n    };\n\n    const moveToNextPlayer = () => {\n        let playerOnMove: Player = players.filter((p) => {\n            return p.isOnMove;\n        })[0];\n        let idOnMove: number = playerOnMove.getId();\n        togglePlayerOnMove(idOnMove);\n        if (idOnMove + 1 === players.length) {\n            togglePlayerOnMove(0);\n        } else {\n            togglePlayerOnMove(idOnMove + 1);\n        }\n    };\n\n    ///////////////////////////////////////////////////////////////////////////\n    //                       cards and their functions                       //\n    ///////////////////////////////////////////////////////////////////////////\n    // consider using useReducer for cards\n    const cardFactory = singlCardFactory.getCardFactoryInstance();\n    const [cards, setCards] = useState(cardFactory.getAllCards());\n\n    // can click on other card or need to wait for player to finish turn\n    const [canClickOnCard, setCanClickOnCard] = useState(true);\n\n    const toggleCardCover = (cardId: number) => {\n        setCards(\n            cards.map((c) => {\n                if (c.getId() === cardId) {\n                    c.toggleCovered();\n                }\n                return c;\n            })\n        );\n    };\n\n    const toggleCardMatched = (id: number) => {\n        setCards(\n            cards.map((c) => {\n                if (c.getId() === id) {\n                    c.toggleMatched();\n                }\n                return c;\n            })\n        );\n    };\n\n    const getUncoveredCards = (): Card[] => {\n        return cards.filter((c) => {\n            return !c.isCovered();\n        });\n    };\n\n    const handleCardClick = (cardId: number) => {\n        if (canClickOnCard) {\n            toggleCardCover(cardId);\n            let uncovCards: Card[] = getUncoveredCards();\n\n            if (uncovCards.length === 2) {\n                if (uncovCards[0].getSymbol() === uncovCards[1].getSymbol()) {\n                    toggleCardMatched(uncovCards[0].getId());\n                    toggleCardMatched(uncovCards[1].getId());\n                    setCanClickOnCard(false);\n                    setTimeout(() => {\n                        uncovCards.forEach((c) => {\n                            toggleCardCover(c.getId());\n                        });\n                        setCanClickOnCard(true);\n                    }, 1000);\n                    addPtsToPlayerOnMove();\n                } else {\n                    setCanClickOnCard(false);\n                    setTimeout(() => {\n                        uncovCards.forEach((c) => {\n                            toggleCardCover(c.getId());\n                        });\n                        moveToNextPlayer();\n                        setCanClickOnCard(true);\n                    }, 2000);\n                }\n            }\n        }\n    };\n\n    return (\n        <div>\n            <h1>Memory game</h1>\n            <Players players={players} />\n            <div className=\"container\">\n                <div className=\"cards\">\n                    {cards.map((o) => (\n                        <CardCell\n                            key={o.getId()} card={o}\n                            clickHandler={handleCardClick} />\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default GamePage;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport \"./LandingPage.css\";\n\nconst LandingPage: React.FC = () => {\n    let [noOfPlayers, setNoOfPlayers] = useState(2);\n    const history = useHistory();\n\n    const handleChoice = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n        setNoOfPlayers(parseInt(event.target.value));\n    };\n\n    const handleSubmit = (event: React.FormEvent<HTMLFormElement>): void => {\n        event.preventDefault();\n        history.replace(`/gamePage/${noOfPlayers}`);\n    };\n\n    return (\n        <div>\n            <h1>Game description</h1>\n            <p className=\"gameDescription\">\n                You will see a set of cards with hidden symbols\n                <br />\n                Click on the card to see the symbol\n                <br />\n                Click on another card with a symbol the same that You have just\n                uncovered\n                <br />\n                Once a pair of cards with the same symbol is revealed, the cards are\n                removed and the player gets the points (player gets next move in the\n                same round)\n                <br />\n                There is about 1-2 second(s) delay for a player to familiarize with the\n                uncovered cards <br />\n                The game ends when all the cards are paired <br />\n                The players take turns to reveal the cards\n                <br />\n            </p>\n            <form onSubmit={handleSubmit}>\n                <label>Choose number of (human) players</label>\n                &nbsp; &nbsp;\n                <select value={noOfPlayers} onChange={handleChoice}>\n                    <option value=\"2\">2</option>\n                    <option value=\"3\">3</option>\n                    <option value=\"4\">4</option>\n                </select>\n                <br /> <br />\n                <input type=\"submit\" value=\"Go To the Game\" />\n            </form>\n        </div>\n    );\n};\n\nexport default LandingPage;\n","import React from \"react\";\nimport {\n    // BrowserRouter as Router,\n    HashRouter as Router,\n    Route,\n    Switch\n} from \"react-router-dom\";\n\nimport GamePage from \"./components/GamePage\";\nimport LandingPage from \"./components/LandingPage\";\n\nimport \"./App.css\";\n\nconst App: React.FC = () => {\n    return (\n        <Router>\n            <Switch>\n                <Route exact path=\"/\">\n                    <LandingPage />\n                </Route>\n                <Route exact path=\"/gamePage/:noOfPlayers\">\n                    <GamePage />\n                </Route>\n                <Route path=\"*\">{() => \"404 NOT FOUND\"}</Route>\n            </Switch>\n        </Router>\n    );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}